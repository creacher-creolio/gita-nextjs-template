---
description: 
globs: 
alwaysApply: false
---
## Setup & Structure
- Create state atoms in separate files under a `state/` directory for modularity (e.g., `state/settings.ts` for `theme$`).
- Enable React tracking with `enableReactTracking({ auto: true })` in the app entry point (e.g., `index.js`) for prototyping, but consider `observer` for production performance.
- Structure complex state with normalized nested objects and arrays, using unique IDs for array items to optimize reactivity and persistence.

## Best Practices
- Prefer `computed` observables (e.g., `observable(() => ...)` over separate atoms for derived values, unless persistence or two-way linking is required.
- Use reactive wrappers like `observer` (HOC) for components and `useSelector` (hook) for computed state consumption in React.
- Handle async operations with async observables (e.g., `observable(() => fetch(...))`) or `synced` configurations instead of `useEffect`.
- Use the `when()` method for conditional state derivations or to await truthy conditions.
- Implement `observe()` for side effects (e.g., logging, updates) instead of `useEffect`.
- Keep state normalized (e.g., `Record<string, Item>` or arrays with IDs) to avoid duplication and improve sync efficiency.